name: CICD Products-service 

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=MauriGD_products-service
        
      - name: maven
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
         java-version: '11'
         distribution: 'adopt'
         cache: maven
      
      - name: Build with Maven
        run: |
            mvn -B package --file pom.xml
            mkdir artifact && cp target/*.jar artifact
            cd artifact && ls
      - name: save artifact
        uses: actions/upload-artifact@v2
        with:
        
         name: github-action-artifact
         path: artifact
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
         aws-region: us-east-1
        
      - name: Docker Build and sent to Repo
        env:
         IMAGE_TAG: latest
        run: | 
            ls target
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 083266080818.dkr.ecr.us-east-1.amazonaws.com
            docker build --build-arg JAR_FILE=target/products-service-example-0.0.1-SNAPSHOT.jar -t products-service .
            docker tag products-service:latest 083266080818.dkr.ecr.us-east-1.amazonaws.com/products-service:$IMAGE_TAG
            docker push 083266080818.dkr.ecr.us-east-1.amazonaws.com/products-service:$IMAGE_TAG
            aws ecs describe-task-definition --task-definition products_service-task --query taskDefinition > task-definition.json
                        
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
         task-definition: task-definition.json
         container-name: products_service
         image: 083266080818.dkr.ecr.us-east-1.amazonaws.com/products-service:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
         task-definition: task-definition.json
         service: products_service
         cluster: FGCluster
         wait-for-service-stability: true
